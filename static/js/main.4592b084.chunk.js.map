{"version":3,"sources":["contexts/index.js","components/EpisodeBox.js","components/MoreButton.js","components/ListEpisodes.js","reducers/addFavorite.js","components/CharacterBox.js","components/ListCharacters.js","components/UserBox.js","components/CharBox.js","components/SameLikes.js","components/LoginForm.js","components/AddUser.js","App.js","serviceWorker.js","index.js"],"names":["RickContext","React","createContext","EpisodeBox","props","favoriteList","includes","episode","id","react_default","a","createElement","className","index_es","icon","name","onClick","removeFavorite","makeFavorite","MoreButton","_ref","loadMore","currentPage","maxPage","useContext","ListEpisodes","context","episodes","map","index","components_EpisodeBox","key","components_MoreButton","loadMoreEps","epPage","addFavorite","type","concat","Object","toConsumableArray","filter","CharacterBox","character","src","image","ListCharacters","console","log","characters","components_CharacterBox","makeFavoriteChar","removeFavoriteChar","favoriteChars","loadMoreChars","charPage","UserBox","loggedIn","length","i","user","CharBox","SameLikes","users","components_UserBox","components_CharBox","LoginForm","_useState","useState","email","password","_useState2","slicedToArray","values","setValues","handleChange","event","_event$target","target","value","objectSpread","defineProperty","onSubmit","preventDefault","logIn","find","setLoggedIn","alert","placeholder","onChange","AddUser","undefined","addUsers","library","add","faHeart","App","_useState3","_useState4","_useState5","_useState6","setEpisodes","_useState7","next","_useState8","setEpPage","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","axios","get","sent","data","results","info","pages","stop","apply","this","arguments","getApi","_ref2","_callee2","_context2","_useState9","_useState10","setCharacters","_useState11","_useState12","setCharPage","_ref3","_callee3","_context3","_ref4","_callee4","_context4","_useReducer","useReducer","_useReducer2","setFavorite","favoriteUpdate","_useState13","_useState14","sameLikes","setSameLikes","_useReducer3","_useReducer4","setFavoriteChar","favoriteCharUpdate","rickContext","likeUpdate","Provider","react_router_dom","role","aria-label","to","aria-expanded","aria-hidden","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4592b084.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const RickContext = React.createContext()","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst EpisodeBox = props => {\r\n    if (props.favoriteList.includes(props.episode.id)) { // if favorite\r\n        return (\r\n            <div className='box '>\r\n                    <div>\r\n                        <FontAwesomeIcon icon='heart'/>\r\n                    </div>\r\n                    <div>\r\n                    {props.episode.name}\r\n                    </div>   \r\n                <button className=\"button is-danger is-rounded\" onClick={() => props.removeFavorite(props.episode.id)}>Remove from favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    else { // if not favorite\r\n        return (\r\n            <div className='box'>\r\n                    <div>\r\n                    {props.episode.name}\r\n                    </div>\r\n                <button className=\"button is-success is-rounded\" onClick={() => props.makeFavorite(props.episode.id)}>Add to favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default EpisodeBox","import React, {useContext} from 'react'\r\nimport { RickContext } from './../contexts'\r\nimport 'bulma/css/bulma.css'\r\n\r\nconst MoreButton = ({loadMore, currentPage, maxPage}) => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n        currentPage < maxPage && <button className=\"button is-light\" onClick={loadMore}>Load more</button>\r\n    )\r\n}\r\n\r\nexport default MoreButton","import React, {useContext} from 'react'\r\nimport { RickContext } from './../contexts'\r\nimport EpisodeBox from './EpisodeBox' \r\nimport MoreButton from './MoreButton'\r\n\r\nconst ListEpisodes = () => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n            <div>\r\n                <div><br/><br/><br/></div>\r\n            {context.episodes.map((episode, index) => (\r\n                <EpisodeBox key={index} \r\n                episode={episode} \r\n                makeFavorite={context.makeFavorite} \r\n                removeFavorite={context.removeFavorite} \r\n                favoriteList={context.favoriteList}/>\r\n            ))}\r\n            <MoreButton loadMore={context.loadMoreEps} \r\n            currentPage={context.epPage.currentPage} \r\n            maxPage={context.epPage.maxPage}/>\r\n            </div>      \r\n        )\r\n}\r\n\r\nexport default ListEpisodes\r\n","// Reducer for adding favorites\r\n\r\nconst addFavorite = (favoriteList, { type, id }) => {\r\n  switch (type) {\r\n    case 'add':\r\n      return ([...favoriteList, id])\r\n    case 'remove':\r\n      return favoriteList.filter(index => (index !== id)) \r\n    default:\r\n      return favoriteList;\r\n  }\r\n}\r\n\r\nexport default addFavorite\r\n","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst CharacterBox = props => {\r\n    if (props.favoriteList.includes(props.character.id)) { // if favorite\r\n        return (\r\n            <div className='box '>\r\n                    <div>\r\n                        <FontAwesomeIcon icon='heart'/>\r\n                    </div>\r\n                    <div>\r\n                    {props.character.name}\r\n                    </div>\r\n                    <img src={props.character.image}/>\r\n                <button className=\"button is-danger is-rounded\" onClick={() => props.removeFavorite(props.character.id)}>Remove from favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    else { // if not favorite\r\n        return (\r\n            <div className='box'>\r\n                    <div>\r\n                    {props.character.name}\r\n                    </div>\r\n                    <img src={props.character.image}/>\r\n                <button className=\"button is-success is-rounded\" onClick={() => props.makeFavorite(props.character.id)}>Add to favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default CharacterBox","import React, {useContext} from 'react'\r\nimport { RickContext } from '../contexts'\r\nimport CharacterBox from './CharacterBox' \r\nimport MoreButton from './MoreButton'\r\n\r\nconst ListCharacters = () => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n            <div>\r\n                <div><br/><br/><br/></div>\r\n            {console.log(\"props are \", context)}\r\n            {context.characters.map((character, index) => (\r\n                <CharacterBox key={index} \r\n                character={character} \r\n                makeFavorite={context.makeFavoriteChar} \r\n                removeFavorite={context.removeFavoriteChar} \r\n                favoriteList={context.favoriteChars}/>\r\n            ))}\r\n            <MoreButton loadMore={context.loadMoreChars} \r\n            currentPage={context.charPage.currentPage} \r\n            maxPage={context.charPage.maxPage}/>\r\n            </div>      \r\n        )\r\n}\r\n\r\nexport default ListCharacters\r\n","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst UserBox = props => {\r\n    const favoriteList = props.loggedIn.favoriteList\r\n    if (favoriteList.length === 0) {\r\n        console.log(\"empty\")\r\n        return (\r\n            <div>  \r\n            </div>\r\n        )\r\n    }\r\n    for (var i = 0; i < favoriteList.length; i++) {\r\n        if (props.user.name !== props.loggedIn.name) {\r\n            if (props.user.favoriteList.includes(favoriteList[i])) {\r\n                return (\r\n                    <div className='box '>\r\n                        <div>\r\n                            <FontAwesomeIcon icon='heart'/>\r\n                        </div>\r\n                        <div>\r\n                        {props.user.name} has similar tastes in episodes!\r\n                        </div>   \r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>      \r\n        </div>\r\n    )           \r\n}\r\n\r\nexport default UserBox","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst CharBox = props => {\r\n    const favoriteChars = props.loggedIn.favoriteChars\r\n    if (favoriteChars.length === 0) {\r\n        console.log(\"empty\")\r\n        return (\r\n            <div>  \r\n            </div>\r\n        )\r\n    }\r\n    for (var i = 0; i < favoriteChars.length; i++) {\r\n        if (props.user.name !== props.loggedIn.name) {\r\n            if (props.user.favoriteChars.includes(favoriteChars[i])) {\r\n                return (\r\n                    <div className='box '>\r\n                        <div>\r\n                            <FontAwesomeIcon icon='heart'/>\r\n                        </div>\r\n                        <div>\r\n                        {props.user.name} has similar tastes in characters!\r\n                        </div>   \r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>      \r\n        </div>\r\n    )           \r\n}\r\n\r\nexport default CharBox","import React, {useContext} from 'react'\r\nimport { RickContext } from './../contexts'\r\nimport UserBox from './UserBox' \r\nimport CharBox from './CharBox'\r\nimport 'bulma/css/bulma.css'\r\n     \r\n\r\nconst SameLikes = () => {\r\n  const context = useContext(RickContext)\r\n  return (\r\n    <div>\r\n    <div><br/><br/><br/>Users with similar tastes</div>\r\n        <div>In episodes:\r\n        {context.users.map((user, index) => (        \r\n            <div>\r\n            <UserBox key={index} \r\n            user={user}\r\n            loggedIn={context.loggedIn}/>\r\n            </div>            \r\n        ))}\r\n        </div><br/><br/><br/>\r\n        <div>In characters:\r\n        {context.users.map((user, index) => (\r\n            <div>\r\n            <CharBox key={index} \r\n            user={user}\r\n            loggedIn={context.loggedIn}/>\r\n            </div>           \r\n        ))}\r\n        </div>\r\n    </div>   \r\n  )\r\n}\r\n\r\nexport default SameLikes","import React, { useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RickContext } from '../contexts'\r\nimport 'bulma/css/bulma.css'\r\n\r\n\r\nconst LoginForm = () => {\r\n    const context = useContext(RickContext)\r\n\r\n    const [values, setValues] = useState({\r\n        email: '',\r\n        password: ''\r\n      })\r\n    \r\n      const handleChange = (event) => {\r\n        const {\r\n          name,\r\n          value\r\n        } = event.target\r\n    \r\n        setValues({\r\n          ...values,\r\n          [name]: value\r\n        })\r\n      }\r\n    \r\n      const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const logIn = context.users.find(user => {\r\n          return (            \r\n            user.email === values.email &&\r\n            user.password === values.password\r\n          )\r\n        }\r\n        )\r\n\r\n        //if log in successful\r\n        if (logIn) {\r\n          context.setLoggedIn(logIn)\r\n          alert('Login successful!')\r\n        }\r\n\r\n        //if log in not successful\r\n        else {\r\n          alert('Email and password do not match. Try again!')\r\n          context.setLoggedIn(null)\r\n        }\r\n\r\n        // login(values.email, values.password)\r\n      }\r\n\r\n      return (\r\n        <div> If registered, log in:\r\n        <form onSubmit={handleSubmit}>\r\n          <input className='input'\r\n           type=\"email\"\r\n           name='email'\r\n           placeholder=\"E-mail\"\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input className='input'\r\n           type=\"password\"\r\n           name='password'\r\n           placeholder=\"Password\"\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <button className='button' type='submit'>Login</button>\r\n        </form>\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default LoginForm","import React, { useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RickContext } from '../contexts'\r\nimport 'bulma/css/bulma.css'\r\n\r\n\r\nconst AddUser = () => {\r\n    const context = useContext(RickContext)\r\n\r\n    const [values, setValues] = useState({\r\n        email: '',\r\n        password: ''\r\n      })\r\n    \r\n      const handleChange = (event) => {\r\n        const {\r\n          name,\r\n          value\r\n        } = event.target\r\n    \r\n        setValues({\r\n          ...values,\r\n          [name]: value\r\n        })\r\n      }\r\n    \r\n      const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const userExists = context.users.find(user => {\r\n          return (            \r\n            user.email === values.email ||\r\n            user.name === values.name\r\n          )\r\n        }\r\n        )\r\n\r\n        if (userExists === undefined) {\r\n          context.addUsers(\r\n            [\r\n              ...context.users,\r\n             {\r\n              name: values.name,\r\n              password: values.password,\r\n              email: values.email\r\n             }\r\n            ]\r\n          )\r\n        }\r\n\r\n        else {\r\n          alert('Username or E-mail is already registered!')\r\n        }\r\n        \r\n        console.log(\"users are now \", context.users)\r\n      }\r\n\r\n      return (\r\n        <div><br></br><br></br> If not, register below:\r\n        <form onSubmit={handleSubmit}>\r\n          <input className='input'\r\n           type=\"name\"\r\n           placeholder=\"Username\"\r\n           name='name'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input className='input'\r\n           type=\"email\"\r\n           placeholder=\"E-mail\"\r\n           name='email'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input className='input'\r\n           type=\"password\"\r\n           placeholder=\"Password\"\r\n           name='password'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <button className='button' type='submit'>Register</button>\r\n        </form>\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default AddUser","import React, { useEffect , useReducer, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport { RickContext } from './contexts'\nimport ListEpisodes from './components/ListEpisodes'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport addFavorite from './reducers/addFavorite'\nimport 'bulma/css/bulma.css'\nimport ListCharacters from './components/ListCharacters'\nimport SameLikes from './components/SameLikes'\nimport LoginForm from './components/LoginForm'\nimport AddUser from './components/AddUser';\n\n\nlibrary.add(faHeart)\n\n// TODO \n/// Favorites list per user DONE\n/// Route if not logged in \n/// Add same favorites page DONE\n/// Add photos\n/// CSS for login forms\n/// Modal for new user\n/// Upload to gh-pages DONE\n\nconst App = props => {\n\n    // Set up login variables\n\n    const [loggedIn, setLoggedIn] = useState(null) \n\n    const [users, addUsers] = useState([\n       {\n        name: 'Diego',\n        password: '910440',\n        email: 'diegosalva.ds@gmail.com',\n        favoriteList: [],\n        favoriteChars: []\n        },\n        {\n        name: 'Mische',\n        password: '710999',\n        email: 'mischekang@gmail.com',\n        favoriteList: [3, 5],\n        favoriteChars: [4, 5]\n        }]\n    )\n\n  // Connect episodes to API\n\n  const [episodes, setEpisodes] = useState([])\n\n  const [epPage, setEpPage] = useState({\n    currentPage: 1,\n    next: '',\n    maxPage: null,\n  })\n\n  useEffect(() => {\n    const getApi = async () => {\n      const response = await axios.get('https://rickandmortyapi.com/api/episode/')\n\n      setEpisodes(response.data.results)\n\n      setEpPage({\n        ...epPage,\n        next: response.data.info.next,\n        maxPage: response.data.info.pages\n      })\n    }\n\n    getApi()\n  }, [])\n\n  const loadMoreEps = async () => {\n\n    const { next, currentPage } = epPage\n\n\n    const response = await axios.get(next)\n\n    setEpisodes([...episodes, ...response.data.results])\n\n    setEpPage({\n      ...epPage,\n      next: response.data.info.next,\n      currentPage: currentPage + 1\n    })\n  } \n\n  // Connect characters to API\n\n   // Link episodes to API\n   const [characters, setCharacters] = useState([])\n\n   const [charPage, setCharPage] = useState({\n      currentPage: 1,\n      next: '',\n      maxPage: null,\n    })\n \n   useEffect(() => {\n     const getApi = async () => {\n       const response = await axios.get('https://rickandmortyapi.com/api/character/')\n \n       setCharacters(response.data.results)\n \n       setCharPage({\n         ...charPage,\n         next: response.data.info.next,\n         maxPage: response.data.info.pages\n       })\n     }\n \n     getApi()\n   }, [])\n\n    const loadMoreChars = async () => {\n\n      const { next, currentPage } = charPage\n\n      const response = await axios.get(next)\n\n      setCharacters([...characters, ...response.data.results])\n\n      setCharPage({\n        ...charPage,\n        next: response.data.info.next,\n        currentPage: currentPage + 1\n      })\n    }\n\n  // Functions (actions) for adding favorite episodes\n\n  const [favoriteList, setFavorite] = useReducer(addFavorite, [])\n\n  // function for updating favorite episode list for logged in user\n  function favoriteUpdate () {\n    // update users' favorite list\n    addUsers(users.map((user) => {\n      if (loggedIn.name === user.name) {\n        user.favoriteList = favoriteList\n      }\n      return user\n    }\n    ))\n  }\n\n   // Compare same likes\n\n   const [sameLikes, setSameLikes] = useState([])\n\n   function likeUpdate (id) {\n     setSameLikes(users.map((user) => {\n       if (user.favoriteList.includes(id) && (user.name !== loggedIn.name)) {\n         user = user.name\n       }\n     }\n     )\n   )}\n\n  // Function to add a favorite\n  function makeFavorite (id) {\n    setFavorite({type: 'add', id: id})\n    favoriteUpdate()\n    likeUpdate(id)\n  }\n \n   // Function to remove a favorite\n  function removeFavorite (id) {\n    setFavorite({type: 'remove', id: id})\n    favoriteUpdate()\n  } \n\n  // Functions (actions) for adding favorite characters\n\n  const [favoriteChars, setFavoriteChar] = useReducer(addFavorite, [])\n\n  // function for updating favorite character list for logged in user\n  function favoriteCharUpdate () {\n    /*// identify logged in user\n    const logInUser = users.find(user => {\n      return (            \n        user.name === loggedIn.name)\n    })*/\n\n    // update users' favorite list\n    addUsers(users.map((user) => {\n      if (loggedIn.name === user.name) {\n        user.favoriteChars = favoriteChars\n      }\n      return user\n    }\n    ))\n  }\n\n  // Functions for adding and removing favorite chars\n  function makeFavoriteChar (id) {\n    setFavoriteChar({type: 'add', id: id})\n    favoriteCharUpdate()\n  }\n  \n  function removeFavoriteChar (id) {\n    setFavoriteChar({type: 'remove', id: id})\n    favoriteCharUpdate()\n  }\n\n\n  // Initial state using Context\n\n  const rickContext = {\n    episodes,\n    characters,\n    makeFavorite,\n    removeFavorite,\n    makeFavoriteChar,\n    removeFavoriteChar,\n    favoriteList,\n    sameLikes,\n    favoriteChars,\n    loadMoreEps,\n    loadMoreChars,\n    epPage,\n    charPage,\n    loggedIn,\n    setLoggedIn,\n    users,\n    addUsers\n  }\n\n\n  // Main Render\n\n  return (\n    <RickContext.Provider value = {rickContext}>\n      <div className=\"App\">\n       <header className=\"App-header\">\n        <Router>\n          <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n              {!loggedIn &&\n              <a className=\"navbar-item\">\n              <Link to='/login' className=\"button is-primary\">LOG IN</Link> \n              </a>}\n              <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\">\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n              </a>\n            </div>\n\n            {loggedIn && \n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n              <div className=\"navbar-start\">\n                <a className=\"navbar-item\">\n                  <Link to='/login/' className=\"button is-danger\" onClick={() => setLoggedIn(null)}>LOG OUT</Link> \n                </a>\n                <a className=\"navbar-item\">\n                  <Link to='/episodes/' className=\"button is-info\">Episodes</Link> \n                </a>\n                <a className=\"navbar-item\">\n                  <Link to='/characters/' className=\"button is-info\">Characters</Link> \n                </a>\n                <a className=\"navbar-item\">\n                  <Link to='/favorites/' className=\"button is-info\">Similar tastes</Link> \n                </a>\n              </div>\n            </div> }\n          </nav>\n          <Route path='/login' component={LoginForm}/> \n          <Route path='/login' component={AddUser}/> \n          <Route path='/episodes/' component={ListEpisodes} /> \n          <Route path='/characters/' component={ListCharacters} /> \n          <Route path='/favorites/' component={SameLikes} /> \n        </Router> \n       </header>        \n      </div>\n    </RickContext.Provider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}