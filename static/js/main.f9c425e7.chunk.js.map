{"version":3,"sources":["contexts/index.js","components/EpisodeBox.js","components/MoreButton.js","components/ListEpisodes.js","reducers/addFavorite.js","components/CharacterBox.js","components/ListCharacters.js","components/LoginForm.js","components/AddUser.js","App.js","serviceWorker.js","index.js"],"names":["RickContext","React","createContext","EpisodeBox","props","favoriteList","includes","episode","id","react_default","a","createElement","className","index_es","icon","name","onClick","removeFavorite","makeFavorite","MoreButton","_ref","loadMore","currentPage","maxPage","useContext","ListEpisodes","context","console","log","episodes","map","index","components_EpisodeBox","key","components_MoreButton","loadMoreEps","epPage","addFavorite","type","concat","Object","toConsumableArray","filter","CharacterBox","character","ListCharacters","characters","components_CharacterBox","makeFavoriteChar","removeFavoriteChar","favoriteChars","loadMoreChars","charPage","LoginForm","_useState","useState","email","password","_useState2","slicedToArray","values","setValues","handleChange","event","_event$target","target","value","objectSpread","defineProperty","onSubmit","preventDefault","logIn","users","find","user","setLoggedIn","alert","placeholder","onChange","AddUser","undefined","addUsers","library","add","faHeart","App","loggedIn","_useState3","_useState4","_useState5","_useState6","setEpisodes","_useState7","next","_useState8","setEpPage","useEffect","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","axios","get","sent","data","results","info","pages","stop","apply","this","arguments","getApi","_ref2","_callee2","_context2","_useState9","_useState10","setCharacters","_useState11","_useState12","setCharPage","_ref3","_callee3","_context3","_ref4","_callee4","_context4","_useReducer","useReducer","_useReducer2","setFavorite","favoriteUpdate","logInUser","_useReducer3","_useReducer4","setFavoriteChar","favoriteCharUpdate","rickContext","Provider","components_LoginForm","react_router_dom","role","aria-label","to","aria-expanded","aria-hidden","react_router","path","component","components_AddUser","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9c425e7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const RickContext = React.createContext()","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst EpisodeBox = props => {\r\n    if (props.favoriteList.includes(props.episode.id)) { // if favorite\r\n        return (\r\n            <div className='box '>\r\n                    <div>\r\n                        <FontAwesomeIcon icon='heart'/>\r\n                    </div>\r\n                    <div>\r\n                    Name: {props.episode.name}\r\n                    </div>   \r\n                <button className=\"button is-danger is-rounded\" onClick={() => props.removeFavorite(props.episode.id)}>Remove from favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    else { // if not favorite\r\n        return (\r\n            <div className='box'>\r\n                    <div>\r\n                    Name: {props.episode.name}\r\n                    </div>\r\n                <button className=\"button is-success is-rounded\" onClick={() => props.makeFavorite(props.episode.id)}>Add to favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default EpisodeBox","import React, {useContext} from 'react'\r\nimport { RickContext } from './../contexts'\r\nimport 'bulma/css/bulma.css'\r\n\r\nconst MoreButton = ({loadMore, currentPage, maxPage}) => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n        currentPage < maxPage && <button className=\"button is-light\" onClick={loadMore}>Load more</button>\r\n    )\r\n}\r\n\r\nexport default MoreButton","import React, {useContext} from 'react'\r\nimport { RickContext } from './../contexts'\r\nimport EpisodeBox from './EpisodeBox' \r\nimport MoreButton from './MoreButton'\r\n\r\nconst ListEpisodes = () => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n            <div>\r\n                <div><br/><br/><br/></div>\r\n            {console.log(\"props are \", context)}\r\n            {context.episodes.map((episode, index) => (\r\n                <EpisodeBox key={index} \r\n                episode={episode} \r\n                makeFavorite={context.makeFavorite} \r\n                removeFavorite={context.removeFavorite} \r\n                favoriteList={context.favoriteList}/>\r\n            ))}\r\n            <MoreButton loadMore={context.loadMoreEps} \r\n            currentPage={context.epPage.currentPage} \r\n            maxPage={context.epPage.maxPage}/>\r\n            </div>      \r\n        )\r\n}\r\n\r\nexport default ListEpisodes\r\n","// Reducer for adding favorites\r\n\r\nconst addFavorite = (favoriteList, { type, id }) => {\r\n  switch (type) {\r\n    case 'add':\r\n      return ([...favoriteList, id])\r\n    case 'remove':\r\n      return favoriteList.filter(index => (index !== id)) \r\n    default:\r\n      return favoriteList;\r\n  }\r\n}\r\n\r\nexport default addFavorite\r\n","import React from 'react'\r\nimport 'bulma/css/bulma.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst CharacterBox = props => {\r\n    if (props.favoriteList.includes(props.character.id)) { // if favorite\r\n        return (\r\n            <div className='box '>\r\n                    <div>\r\n                        <FontAwesomeIcon icon='heart'/>\r\n                    </div>\r\n                    <div>\r\n                    Name: {props.character.name}\r\n                    </div>   \r\n                <button className=\"button is-danger is-rounded\" onClick={() => props.removeFavorite(props.character.id)}>Remove from favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    else { // if not favorite\r\n        return (\r\n            <div className='box'>\r\n                    <div>\r\n                    Name: {props.character.name}\r\n                    </div>\r\n                <button className=\"button is-success is-rounded\" onClick={() => props.makeFavorite(props.character.id)}>Add to favorites</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default CharacterBox","import React, {useContext} from 'react'\r\nimport { RickContext } from '../contexts'\r\nimport CharacterBox from './CharacterBox' \r\nimport MoreButton from './MoreButton'\r\n\r\nconst ListCharacters = () => {\r\n    const context = useContext(RickContext)\r\n    return (\r\n            <div>\r\n                <div><br/><br/><br/></div>\r\n            {console.log(\"props are \", context)}\r\n            {context.characters.map((character, index) => (\r\n                <CharacterBox key={index} \r\n                character={character} \r\n                makeFavorite={context.makeFavoriteChar} \r\n                removeFavorite={context.removeFavoriteChar} \r\n                favoriteList={context.favoriteChars}/>\r\n            ))}\r\n            <MoreButton loadMore={context.loadMoreChars} \r\n            currentPage={context.charPage.currentPage} \r\n            maxPage={context.charPage.maxPage}/>\r\n            </div>      \r\n        )\r\n}\r\n\r\nexport default ListCharacters\r\n","import React, { useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RickContext } from '../contexts'\r\n\r\n\r\nconst LoginForm = () => {\r\n    const context = useContext(RickContext)\r\n\r\n    const [values, setValues] = useState({\r\n        email: '',\r\n        password: ''\r\n      })\r\n    \r\n      const handleChange = (event) => {\r\n        const {\r\n          name,\r\n          value\r\n        } = event.target\r\n    \r\n        setValues({\r\n          ...values,\r\n          [name]: value\r\n        })\r\n      }\r\n    \r\n      const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const logIn = context.users.find(user => {\r\n          return (            \r\n            user.email === values.email &&\r\n            user.password === values.password\r\n          )\r\n        }\r\n        )\r\n\r\n        //if log in successful\r\n        if (logIn) {\r\n          context.setLoggedIn(logIn)\r\n          alert('Login successful!')\r\n        }\r\n\r\n        //if log in not successful\r\n        else {\r\n          alert('Email and password do not match. Try again!')\r\n          context.setLoggedIn(null)\r\n        }\r\n\r\n        console.log(\"State is now\", context)\r\n        // login(values.email, values.password)\r\n      }\r\n\r\n      return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n           type=\"email\"\r\n           name='email'\r\n           placeholder=\"E-mail\"\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input\r\n           type=\"password\"\r\n           name='password'\r\n           placeholder=\"Password\"\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <button type='submit'>Login</button>\r\n        </form>\r\n      )\r\n}\r\n\r\nexport default LoginForm","import React, { useState, useContext } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RickContext } from '../contexts'\r\n\r\n\r\nconst AddUser = () => {\r\n    const context = useContext(RickContext)\r\n\r\n    const [values, setValues] = useState({\r\n        email: '',\r\n        password: ''\r\n      })\r\n    \r\n      const handleChange = (event) => {\r\n        const {\r\n          name,\r\n          value\r\n        } = event.target\r\n    \r\n        setValues({\r\n          ...values,\r\n          [name]: value\r\n        })\r\n      }\r\n    \r\n      const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const userExists = context.users.find(user => {\r\n          return (            \r\n            user.email === values.email ||\r\n            user.name === values.name\r\n          )\r\n        }\r\n        )\r\n\r\n        if (userExists === undefined) {\r\n          context.addUsers(\r\n            [\r\n              ...context.users,\r\n             {\r\n              name: values.name,\r\n              password: values.password,\r\n              email: values.email\r\n             }\r\n            ]\r\n          )\r\n        }\r\n\r\n        else {\r\n          alert('Username or E-mail is already registered!')\r\n        }\r\n        \r\n        console.log(\"users are now \", context.users)\r\n      }\r\n\r\n      return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n           type=\"name\"\r\n           placeholder=\"Username\"\r\n           name='name'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input\r\n           type=\"email\"\r\n           placeholder=\"E-mail\"\r\n           name='email'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <input\r\n           type=\"password\"\r\n           placeholder=\"Password\"\r\n           name='password'\r\n           value={values['']}\r\n           onChange={handleChange}\r\n          />\r\n          <button type='submit'>Register</button>\r\n        </form>\r\n      )\r\n}\r\n\r\nexport default AddUser","import React, { useEffect , useReducer, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport { RickContext } from './contexts'\nimport ListEpisodes from './components/ListEpisodes'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport addFavorite from './reducers/addFavorite'\nimport 'bulma/css/bulma.css'\nimport ListCharacters from './components/ListCharacters'\nimport LoginForm from './components/LoginForm'\nimport AddUser from './components/AddUser';\n\n\nlibrary.add(faHeart)\n\n// TODO \n/// Route if not logged in \n/// Add same favorites page\n/// Add photos\n/// CSS for login forms\n/// Modal for new user\n/// Upload to gh-pages\n\nconst App = props => {\n\n    // Set up login variables\n\n    const [loggedIn, setLoggedIn] = useState(null) \n\n    const [users, addUsers] = useState([\n       {\n        name: 'Diego',\n        password: '910440',\n        email: 'diegosalva.ds@gmail.com',\n        favoriteList: [],\n        favoriteChars: []\n        },\n        {\n        name: 'Mische',\n        password: '710999',\n        email: 'mischekang@gmail.com',\n        favoriteList: [],\n        favoriteChars: []\n        }]\n    )\n\n  // Connect episodes to API\n\n  const [episodes, setEpisodes] = useState([])\n\n  const [epPage, setEpPage] = useState({\n    currentPage: 1,\n    next: '',\n    maxPage: null,\n  })\n\n  useEffect(() => {\n    const getApi = async () => {\n      const response = await axios.get('https://rickandmortyapi.com/api/episode/')\n      console.log(\"episode data is \", response.data.results)\n\n      setEpisodes(response.data.results)\n\n      setEpPage({\n        ...epPage,\n        next: response.data.info.next,\n        maxPage: response.data.info.pages\n      })\n    }\n\n    getApi()\n  }, [])\n\n  const loadMoreEps = async () => {\n\n    const { next, currentPage } = epPage\n\n    console.log(\"infoPage is now \", epPage)\n\n    const response = await axios.get(next)\n\n    setEpisodes([...episodes, ...response.data.results])\n\n    setEpPage({\n      ...epPage,\n      next: response.data.info.next,\n      currentPage: currentPage + 1\n    })\n  } \n\n  // Connect characters to API\n\n   // Link episodes to API\n   const [characters, setCharacters] = useState([])\n\n   const [charPage, setCharPage] = useState({\n      currentPage: 1,\n      next: '',\n      maxPage: null,\n    })\n \n   useEffect(() => {\n     const getApi = async () => {\n       const response = await axios.get('https://rickandmortyapi.com/api/character/')\n       console.log(\"character data is \", response.data.results)\n \n       setCharacters(response.data.results)\n \n       setCharPage({\n         ...charPage,\n         next: response.data.info.next,\n         maxPage: response.data.info.pages\n       })\n     }\n \n     getApi()\n   }, [])\n\n    const loadMoreChars = async () => {\n\n      console.log(\"infoPage is now \", charPage)\n\n      const { next, currentPage } = charPage\n\n      const response = await axios.get(next)\n\n      setCharacters([...characters, ...response.data.results])\n\n      setCharPage({\n        ...charPage,\n        next: response.data.info.next,\n        currentPage: currentPage + 1\n      })\n    }\n\n  // Functions (actions) for adding favorite episodes\n\n  const [favoriteList, setFavorite] = useReducer(addFavorite, [])\n\n  // function for updating favorite episode list for logged in user\n  function favoriteUpdate () {\n    // identify logged in user\n    const logInUser = users.find(user => {\n      return (            \n        user.name === loggedIn.name)\n    })\n\n    // update users' favorite list\n    addUsers(users.map((user) => {\n      if (logInUser.name === user.name) {\n        user.favoriteList = favoriteList\n      }\n      return user\n    }\n    ))\n  }\n\n  // Function to add a favorite\n  function makeFavorite (id) {\n    setFavorite({type: 'add', id: id})\n    favoriteUpdate()\n  }\n \n   // Function to remove a favorite\n  function removeFavorite (id) {\n    setFavorite({type: 'remove', id: id})\n    favoriteUpdate()\n  } \n\n  // Functions (actions) for adding favorite characters\n\n  const [favoriteChars, setFavoriteChar] = useReducer(addFavorite, [])\n\n  // function for updating favorite character list for logged in user\n  function favoriteCharUpdate () {\n    // identify logged in user\n    const logInUser = users.find(user => {\n      return (            \n        user.name === loggedIn.name)\n    })\n\n    // update users' favorite list\n    addUsers(users.map((user) => {\n      if (logInUser.name === user.name) {\n        user.favoriteChars = favoriteChars\n      }\n      return user\n    }\n    ))\n  }\n\n  // Functions for adding and removing favorite chars\n  function makeFavoriteChar (id) {\n    setFavoriteChar({type: 'add', id: id})\n    favoriteCharUpdate()\n  }\n  \n  function removeFavoriteChar (id) {\n    setFavoriteChar({type: 'remove', id: id})\n    favoriteCharUpdate()\n  }\n\n  // Initial state using Context\n\n  const rickContext = {\n    episodes,\n    characters,\n    makeFavorite,\n    removeFavorite,\n    makeFavoriteChar,\n    removeFavoriteChar,\n    favoriteList,\n    favoriteChars,\n    loadMoreEps,\n    loadMoreChars,\n    epPage,\n    charPage,\n    loggedIn,\n    setLoggedIn,\n    users,\n    addUsers\n  }\n\n  console.log(\"rickContext is \", rickContext)\n\n  // Main Render\n\n  return (\n    <RickContext.Provider value = {rickContext}>\n      <div className=\"App\">\n       <header className=\"App-header\">\n        <LoginForm/>\n        <Router>\n          \n          <nav className=\"navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n              <a className=\"navbar-item\">\n              <Link to='/' className=\"button is-primary\">HOME</Link> \n              </a>\n              <a role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\">\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n                <span aria-hidden=\"true\"></span>\n              </a>\n            </div>\n\n            {loggedIn && \n            <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n              <div className=\"navbar-start\">\n                <a className=\"navbar-item\">\n                  <Link to='/episodes/' className=\"button is-info\">Episodes</Link> \n                </a>\n                <a className=\"navbar-item\">\n                  <Link to='/characters/' className=\"button is-info\">Characters</Link> \n                </a>\n              </div>\n            </div> }\n          </nav>\n\n          <Route path='/episodes/' component={ListEpisodes} /> \n          <Route path='/characters/' component={ListCharacters} /> \n        </Router> \n        <AddUser/>       \n       </header>        \n      </div>\n    </RickContext.Provider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}